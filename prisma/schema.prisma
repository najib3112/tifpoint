// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  username           String      @unique
  email              String      @unique
  password           String
  nim                String?     @unique
  name               String      
  role               Role        @default(MAHASISWA)
  resetPasswordToken String?     @unique
  resetPasswordExpires DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  activities         Activity[]
  verifiedActivities Activity[]  @relation("VerifiedActivities")
}

enum Role {
  MAHASISWA
  ADMIN
}

model Activity {
  id                 String           @id @default(cuid())
  title              String
  description        String?
  userId             String
  user               User             @relation(fields: [userId], references: [id])
  competencyId       String
  competency         Competency       @relation(fields: [competencyId], references: [id])
  activityTypeId     String
  activityType       ActivityType     @relation(fields: [activityTypeId], references: [id])
  documentUrl        String
  documentPublicId   String?
  point              Int?
  status             ActivityStatus   @default(PENDING)
  comment            String?
  verifiedById       String?
  verifier           User?            @relation("VerifiedActivities", fields: [verifiedById], references: [id])
  verifiedAt         DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  recognizedCourseId String?
  recognizedCourse   RecognizedCourse? @relation(fields: [recognizedCourseId], references: [id])
  eventId            String?
  event              Event?           @relation(fields: [eventId], references: [id])
}

enum ActivityStatus {
  PENDING
  APPROVED
  REJECTED
}

model Competency {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  activities  Activity[]
}

model ActivityType {
  id           String      @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  activities   Activity[]
}

model RecognizedCourse {
  id          String      @id @default(cuid())
  name        String
  provider    String
  duration    Int
  pointValue  Int
  url         String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  activities  Activity[]
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String
  date        DateTime
  location    String?
  pointValue  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  activities  Activity[]
}
